<?php

/**
 * @file
 * Make use of the CTools jump menu and grabs from an existing menu.
 * See: modules/ctools/includes/jump-menu.inc
 * NOTE: Menu items must be checked as "expanded" for traversing to work.
 */

/**
 * Main constructor function.
 */
function jump_menu($menu, $parent, $btn = false, $maxDepth = 0, $choose = 'Select a destination') {
    
  ctools_include('jump-menu');
  // Load up the menu.
  $menu = menu_tree_all_data($menu);
  // Trim to the needed portion, start at parent menuID.
  foreach($menu as $m) {
    if ($m['link']['mlid'] == $parent) { // mlid is i18n tranlsation friendly.
      $menu = $m['below'];
      break;
    }
  }
  
  // Initialize for building.
  $depths = array('current' => 1, 'max' => $maxDepth);
  $targets = array();
  // Build the jump options from the menu.
  _jump_menu_create_options($targets, $menu, $depths);

  // Output...
  if (count($targets) == 0) {
    return 'Jump menu contains no items!';
  } else {
      
    $options = array();
    // Handle button option.
    if($btn) {
        $options['hide'] = false;
        $options['button'] = $btn;
    } else {
        $options['hide'] = true;
    }
    // Place initial select option value.
    $options['choose'] = t($choose);
    
    // Other available options...
    //'title' => The text to display for the #title attribute.
    //'description': The text to display for the #description attribute.
    //'default_value': The text to display for the #default_value attribute.
    //'image': If set, an image button will be used instead, and the image set to this.
    //'inline': If set to TRUE (default) the display will be forced inline.

    return drupal_render( drupal_get_form('ctools_jump_menu', $targets, $options) );
  }

}

/**
 * Recursive menu to select option building.
 */
function _jump_menu_create_options(&$t, &$m, &$d) {
  foreach ($m as $item) { // Set the option.
    
    if($item['link']['hidden'] == 0) { // Kill non-viewable menu items.
      
      // Add depth indicators to titles.
      if($d['current'] > 1) {
        $title = ' '. str_repeat('-', $d['current']-1) .' '. $item['link']['title'];
      } else {
        $title = $item['link']['title'];
      }
      // Add targets.
      // Allow for special menu item dummy items for grouping.
      if (module_exists('special_menu_items') && $item['link']['page_callback'] == 'drupal_not_found') {
        // Create a dummy option using optgroups.
        // $t[ t($title) ] = array(); // Prior to special render path
        $t[] = array(
          'title' => t($title),
          '#attributes' => array('class' => 'd-' . $d['current']),
        );

      } else {
        // Create a normal option.
        // $t[ url($item['link']['href']) ] = t($title); // Prior to special render path.
        $t[] = array(
          'value' => url($item['link']['href']),
          'title' => t($title),
          '#attributes' => array('class' => 'd-' . $d['current']),
        );
      }
    }
    
     // Loop deeper if there is no max or we haven't reached it.
    if ($item['below'] && ($d['max'] == 0 || $d['current'] < $d['max'])) {
      $d['current']++; // Drop current depth.
      _jump_menu_create_options($t, $item['below'], $d);
    }
  }
  $d['current']--; // Raise current depth back up.
}

/**
 * Register jump blocks for all menus.
 */
function jump_menu_block_info() {
  
  // Add all menus as blocks.
  $menus = menu_get_menus(TRUE);
  $blocks = array();
  foreach ($menus as $name => $title) {
    $blocks['jump-menu_menu_' . $name]['info'] = t('Jump Menu') . ' ' . t('menu') . ' - ' . check_plain($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks['jump-menu_menu_' . $name]['cache'] = DRUPAL_NO_CACHE;
  }
  $blocks['jump-menu_local_' . $name]['info'] = t('Jump Menu') . ': ' . t('Local tasks');
  $blocks['jump-menu_local_' . $name]['cache'] = DRUPAL_NO_CACHE;

  return $blocks;
}

/**
 * Display jump menu block.
 */
function jump_menu_block_view($delta = '') {
  // Default rendering.
  // The block_view_alter function re-renders if block settings are in place.
  return _jump_menu_render_block($delta);
}

/**
 * Make use of block settings on display.
 */
function jump_menu_block_view_alter(&$data, $block) {
  if ($block->module == 'jump_menu' && $block->title) {
    // Pass in the block settings.
    $options['choose'] = $block->title;
    // Replace content with user set title as choice text.
    // Would be nice to avoid rendering the menu twice in the stack.
    $dataBuild = _jump_menu_render_block($block->delta, $options);
    $data['content'] = $dataBuild['content'];
  }
}

/**
 * Abstract block rendering to be more flexible about when/how this happens.
 */
function _jump_menu_render_block($delta, $options = array()) {
  
  // Strip off jump_menu. 
  $blockName = str_replace('jump-menu_', '', $delta);
  // Cache menu list.
  static $menus;
  if (!isset($menus)) {
    $menus = menu_get_menus(TRUE);
  }
  
  // If a menu block.
  if (substr($blockName, 0, 5) == 'menu_') {
    $data['subject'] = check_plain($menus[substr($blockName, 5)]);
    
    // Set default 'choose' text to menu name.
    $options['choose'] = (isset($options['choose'])) ? $options['choose'] : check_plain($menus[substr($blockName, 5)]);
    $data['content'] = jump_menu(substr($blockName, 5), 0, FALSE, 0, $options['choose']);
  }
  // If a local tasks block.
  elseif (substr($blockName, 0, 6) == 'local_') {

    // Collect the local tasks.
    $links = menu_local_tasks(0);
    $linksSecondary = menu_local_tasks(1);
    // Are there any real secondary tasks?
    $secondary = (count($linksSecondary['tabs']['output']) != 0) ? TRUE : FALSE;
    
    if ($links['tabs']['count'] > 0) {
      $targets = array();
      // Create select list targets
      foreach ($links['tabs']['output'] as $l) {
        if ($l['#link']['access'] == TRUE) {
          $targets[] = array(
            'value' => url($l['#link']['href']),
            'title' => t($l['#link']['title']),
          );
          // Do secondary tabs fit with this item?
          if ($secondary && $linksSecondary['tabs']['output'][0]['#link']['tab_parent_href'] == $l['#link']['href']) {
            foreach ($linksSecondary['tabs']['output'] as $sl) {
              $targets[] = array(
                'value' => url($sl['#link']['href']),
                'title' => '- ' . t($sl['#link']['title']),
              );
            }
          }
        }
      }
      // Take options and place defaults.
      $options['hide'] = (isset($options['hide'])) ? $options['hide'] : TRUE;
      $options['choose'] = (isset($options['choose'])) ? $options['choose'] : t('-- Choose --');      
      // Populate block.
      $data['subject'] = t('Local Tasks');
      $data['content'] = drupal_render( drupal_get_form('ctools_jump_menu', $targets, $options) );
    }
    else {
      $data = '';
    }
    
  }
  // Not suppose to happen.
  else {
    drupal_set_message(t('Something is wrong with the Jump Menu module, please report.'));
    $data = '';
  }
  
  return $data;
  
}

/**
 * Alter theme registrat to allow overriding select theme function,
 * to allow for extra attributes within options through form API.
 * This is to add depth classes.
 */
function jump_menu_theme_registry_alter(&$theme_registry) {
  $theme_registry['select']['function'] = 'jump_menu_select';
}

/**
 * Override select theme function (points select theming to following function).
 */
function jump_menu_select($variables) {
  $element = $variables['element'];
  element_set_attributes($element, array('id', 'name', 'size'));
  _form_set_class($element, array('form-select'));

  /*
  // The careful way, only altering jump menu selects.
  // Provide alternate rendering path for jump menus.
  $output = '<select' . drupal_attributes($element['#attributes']) . '>';
  if ($variables['element']['#attributes']['class'][0] == 'ctools-jump-menu-select') {
    // TODO: This is a weak thing to test.
    $output .= jump_menu_form_select_options($element);
  }
  else {
    $output .= form_select_options($element);
  }
  $output .= '</select>';
  */
  
  $output = '<select' . drupal_attributes($element['#attributes']) . '>' .
    jump_menu_form_select_options($element) . '</select>';
  
  return $output;
}

/**
 * Provide alternate select options builder.
 * Taken from form_select_options() within includes/form.inc
 */
function jump_menu_form_select_options($element, $choices = NULL) {
  if (!isset($choices)) {
    $choices = $element['#options'];
  }
  
  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = $value_valid && is_array($element['#value']);
  $options = '';
  
  foreach ($choices as $key => $choice) {
    
    // Allow overloading options with an array.
    if (is_array($choice)) {
      if (isset($choice['value'])) {
        // Overloaded option array.
        $optValue = (string) $choice['value'];
      }
      else {
        if (isset($choice['title'])) {
          // Optgroup for special menu items.
          $options .= '<optgroup label="' . $choice['title'] . '"></optgroup>';
        }
        else {
          // Normal optgroups
          $options .= '<optgroup label="' . $key . '">';
          $options .= form_select_options($element, $choice);
          $options .= '</optgroup>';
        }
      }
    }
    else {
      // Simple options.
      $optValue = $key;
      $choice = array(
        'title' => $choice,
      );
    }
    
    // Create the HTML output.
    if (isset($optValue)) {
      if (!isset($choice['#attributes'])) {
        $choice['#attributes'] = array();
      }
      // Note this make the first item no longer selected, but that doesn't matter.
      if ($value_valid && (!$value_is_array && (string) $element['#value'] === $optValue || ($value_is_array && in_array($optValue, $element['#value'])))) {
        $selected = ' selected="selected"';
      }
      else {
        $selected = '';
      }
      $options .= '<option value="' . check_plain($optValue) . '"' . $selected . drupal_attributes($choice['#attributes']) . '>' . check_plain($choice['title']) . '</option>';
    }
    unset($optValue);
  }
  return $options;
}